"""
Django settings for freelance_market project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Site settings
SITE_NAME = 'Freelance Market'  # Add your site name here

# Set to True if your site is served over HTTPS
USE_HTTPS = False

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4colyy3#$vu6!7vz4y$=(q=_#3%*6szv%rkz=qwfc16ztfsj2%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# CSRF and CORS settings
CSRF_TRUSTED_ORIGINS = [
    'http://*.127.0.0.1',
    'http://*.localhost',
    'http://127.0.0.1',
    'http://localhost',
    'http://127.0.0.1:8000',
    'http://localhost:8000',
    'http://127.0.0.1:45605',  # Add your development server port
    'http://localhost:45605',   # Add your development server port
]

# CSRF settings
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = False
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'

# CORS settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True  # Only for development
CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:8000',
    'http://localhost:8000',
    'http://127.0.0.1:45605',  # Development server port
    'http://localhost:45605',  # Development server port
    'http://127.0.0.1:46519',  # Additional development port
    'http://localhost:46519',  # Additional development port
]

# For development only - disable in production
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'

# Celery Configuration Options
CELERY_TIMEZONE = 'Africa/Dar_es_Salaam'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'DEBUG',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps.jobs': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'django.contrib.humanize',

    # Third-party apps
    'crispy_forms',
    'crispy_bootstrap5',
    'rest_framework',
    'django_celery_results',
    'django_celery_beat',
    'widget_tweaks',
    
    # Project custom apps
    'apps.accounts.apps.AccountsConfig',
    'apps.jobs.apps.JobsConfig',
    'apps.messagesys.apps.MessagesysConfig',
    'apps.orders.apps.OrdersConfig',
    'apps.payments.apps.PaymentsConfig',
    'apps.reviews.apps.ReviewsConfig',
    'apps.services.apps.ServicesConfig',
    'apps.dashboard.apps.DashboardConfig',
    'apps.home.apps.HomeConfig',
    'apps.freelancer.apps.FreelancerConfig',
    'apps.client.apps.ClientConfig',
    'apps.notifications.apps.NotificationsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Should be as high as possible, especially before CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # Keep this for production
    # 'apps.core.middleware.csrf_debug.CsrfDebugMiddleware',  # Uncomment to debug CSRF issues
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'apps.core.middleware.UserActivityMiddleware',  # Removed as it's not defined
    # 'apps.core.middleware.NotificationMiddleware',  # Removed as it's not defined
]

# CSRF settings - Development configuration
CSRF_USE_SESSIONS = False
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript to read the CSRF token
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_COOKIE_SAMESITE = 'Lax'  # Set to 'None' if using cross-site requests
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'  # Header name for AJAX requests
CSRF_COOKIE_NAME = 'csrftoken'  # Default cookie name
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'  # Custom CSRF failure view
CSRF_COOKIE_DOMAIN = None  # Set to None for local development
SESSION_COOKIE_DOMAIN = None  # Set to None for local development

# Development CORS settings
CORS_ORIGIN_ALLOW_ALL = True  # Allow all origins in development
CORS_ALLOW_CREDENTIALS = True  # Allow credentials (cookies, authorization headers, etc.)

# Development CSRF trusted origins
CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1',
    'http://localhost',
    'http://127.0.0.1:8000',
    'http://localhost:8000',
    'http://127.0.0.1:45605',
    'http://localhost:45605',
    'http://127.0.0.1:3000',  # Common React dev server port
    'http://localhost:3000',  # Common React dev server port
]

# For development only - be more restrictive in production
CSRF_TRUSTED_ORIGINS.append('*')

# For development only - disable in production
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

# CORS settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True  # Only for development
CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:8000',
    'http://localhost:8000',
    'http://127.0.0.1:45605',
    'http://localhost:45605',
    'http://127.0.0.1',
    'http://localhost',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

ROOT_URLCONF = 'freelance_market.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',  # Root templates directory
            BASE_DIR / 'apps' / 'templates',  # Apps shared templates
            BASE_DIR / 'apps' / 'dashboard' / 'templates' / 'dashboard',  # Dashboard base templates
            BASE_DIR / 'apps' / 'dashboard' / 'templates',  # For backward compatibility
            BASE_DIR / 'apps' / 'orders' / 'templates',
            BASE_DIR / 'apps' / 'home' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.dashboard.context_processors.profile_picture_processor',
                'apps.dashboard.context_processors.project_counts_processor',
                'apps.messagesys.context_processors.unread_messages_count',
            ],
        },
    },
]

WSGI_APPLICATION = 'freelance_market.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'freelance_market_db',
        'USER': 'mtakatigs',
        'PASSWORD': '1325',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {
            'init_command' : "SET sql_mode='STRICT_TRANS_TABLES'",
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = [
    BASE_DIR / 'static',
    BASE_DIR / 'apps' / 'dashboard' / 'static',
]

# Directory where collectstatic will collect static files for deployment
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Ensure static files are found in the correct order
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Ensure the staticfiles directory exists
import os
os.makedirs(STATIC_ROOT, exist_ok=True)

# For development, serve media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Ensure the media directory exists
os.makedirs(MEDIA_ROOT, exist_ok=True)

# Custom user model
AUTH_USER_MODEL = 'accounts.User'

# Media files (user uploads)
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Payment Settings
PAYMENT_METHOD_CHOICES = [
    ('azampesa', 'AzamPesa'),
    ('mpesa', 'MPESA'),
    ('tigopesa', 'Tigo Pesa'),
    ('halopesa', 'HaloPesa'),
    ('bank', 'Bank Transfer'),
]

# Minimum withdrawal amount (in TZS)
MIN_WITHDRAWAL_AMOUNT = 10000

# Default currency
DEFAULT_CURRENCY = 'TZS'

# Transaction fees (in percentage)
TRANSACTION_FEE = 2.5  # 2.5% transaction fee

# Payment Gateway Settings (to be configured in production)
PAYMENT_GATEWAYS = {
    'azampesa': {
        'api_key': '',  # Set in production
        'api_secret': '',  # Set in production
        'merchant_id': '',  # Set in production
    },
    'mpesa': {
        'consumer_key': '',  # Set in production
        'consumer_secret': '',  # Set in production
        'passkey': '',  # Set in production
        'shortcode': '',  # Set in production
    },
}

# Invoice Settings
INVOICE_PREFIX = 'INV-'
INVOICE_DUE_DAYS = 7

# Withdrawal Settings
WITHDRAWAL_MIN_AMOUNT = 10000  # TZS 10,000 minimum
WITHDRAWAL_MAX_AMOUNT = 5000000  # TZS 5,000,000 maximum per transaction
WITHDRAWAL_DAILY_LIMIT = 10000000  # TZS 10,000,000 per day

# Email Settings for Payments
PAYMENT_EMAIL_SENDER = 'noreply@freelancemarket.com'
PAYMENT_EMAIL_SUBJECTS = {
    'payment_received': 'Payment Received - {amount} {currency}',
    'withdrawal_request': 'Withdrawal Request - {amount} {currency}',
    'withdrawal_approved': 'Withdrawal Approved - {amount} {currency}',
    'withdrawal_rejected': 'Withdrawal Rejected - {amount} {currency}',
    'invoice_generated': 'New Invoice #{invoice_number} - {amount} {currency}',
    'payment_reminder': 'Payment Reminder - Invoice #{invoice_number}',
}

# Currency Settings
CURRENCIES = {
    'TZS': {
        'name': 'Tanzanian Shilling',
        'symbol': 'TSh',
        'decimal_places': 0,
        'symbol_position': 'left',
        'thousand_separator': ',',
        'decimal_separator': '.',
    },
    'USD': {
        'name': 'US Dollar',
        'symbol': '$',
        'decimal_places': 2,
        'symbol_position': 'left',
        'thousand_separator': ',',
        'decimal_separator': '.',
    },
    'EUR': {
        'name': 'Euro',
        'symbol': '€',
        'decimal_places': 2,
        'symbol_position': 'right',
        'thousand_separator': '.',
        'decimal_separator': ',',
    },
}

# Exchange Rates (example rates, should be updated from a reliable source)
EXCHANGE_RATES = {
    'USD': 1.0,
    'EUR': 0.85,
    'TZS': 2300.0,  # Example rate, should be updated
}

# Payment Session Settings
PAYMENT_SESSION_TIMEOUT = 3600  # 1 hour in seconds

LOGIN_REDIRECT_URL = 'dashboard:home'
LOGIN_URL = 'login'
LOGOUT_REDIRECT_URL = 'home:home_page'

AUTHENTICATION_BACKENDS = [
    'apps.accounts.backends.EmailOrUsernameModelBackend',
    'django.contrib.auth.backends.ModelBackend',  # Keep this as fallback
]

# SETT THESE TO TRUE IN PRODUCTION
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_COOKIE_HTTPONLY = False  # Set to True in production
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_HTTPONLY = True

# Crispy Forms Settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

CSRF_TRUSTED_ORIGINS = [
    'https://group2djangoproject.loca.lt',
    'http://127.0.0.1:8000',
    'http://127.0.0.1:37773',
    'http://localhost:8000',
    'http://127.0.0.1:35941',
    'http://localhost:35941'
]